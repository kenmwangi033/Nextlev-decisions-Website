#!/usr/bin/env node

/**
 * NextLev Decisions Deployment Setup Script
 * Helps configure the landing page for deployment
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import readline from 'readline';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function setupDeployment() {
  console.log('ðŸš€ NextLev Decisions Deployment Setup\n');
  console.log('This script will help you configure your landing page for deployment.\n');

  // Collect configuration
  const config = {};
  
  console.log('ðŸ“‹ Basic Configuration:');
  config.mainAppUrl = await question('Main application URL (e.g., https://app.nextlevdecisions.com): ');
  config.apiUrl = await question('API base URL (e.g., https://api.nextlevdecisions.com): ');
  config.domain = await question('Your domain (e.g., nextlevdecisions.com): ');

  console.log('\nðŸ“§ Email Configuration:');
  config.contactEmail = await question('Contact email (e.g., info@nextlevdecisions.com): ');
  config.supportPhone = await question('Support phone (e.g., +254 728 399 504): ');

  console.log('\nðŸ“Š Analytics (optional - press Enter to skip):');
  config.gaId = await question('Google Analytics ID (G-XXXXXXXXXX): ');
  config.hotjarId = await question('Hotjar ID: ');

  console.log('\nðŸ”— CRM Integration (optional - press Enter to skip):');
  config.hubspotPortalId = await question('HubSpot Portal ID: ');

  // Create environment file
  const envContent = `# NextLev Decisions Environment Configuration
# Generated by setup script on ${new Date().toISOString()}

# Application URLs
VITE_MAIN_APP_URL=${config.mainAppUrl}
VITE_API_BASE_URL=${config.apiUrl}
VITE_DEMO_URL=${config.mainAppUrl}/demo

# Contact Information
VITE_CONTACT_EMAIL=${config.contactEmail}
VITE_SUPPORT_PHONE=${config.supportPhone}

# Analytics
VITE_GOOGLE_ANALYTICS_ID=${config.gaId}
VITE_HOTJAR_ID=${config.hotjarId}

# CRM Integration
VITE_HUBSPOT_PORTAL_ID=${config.hubspotPortalId}

# Feature Flags
VITE_ENABLE_CHAT=true
VITE_ENABLE_EXIT_INTENT=true
VITE_ENABLE_LEAD_MAGNETS=true

# Email Service (configure these in your hosting platform)
# VITE_EMAILJS_SERVICE_ID=
# VITE_EMAILJS_TEMPLATE_ID=
# VITE_EMAILJS_PUBLIC_KEY=

# Backend API Keys (configure these in your API deployment)
# HUBSPOT_ACCESS_TOKEN=
# SENDGRID_API_KEY=
# SUPABASE_URL=
# SUPABASE_ANON_KEY=
`;

  const envPath = path.join(__dirname, '..', '.env.local');
  fs.writeFileSync(envPath, envContent);

  console.log('\nâœ… Configuration saved to .env.local');

  // Update App.tsx with the correct URLs
  const appPath = path.join(__dirname, '..', 'src', 'App.tsx');
  let appContent = fs.readFileSync(appPath, 'utf8');
  
  // Update the demo link generation
  const demoLinkRegex = /const demoLink = `https:\/\/app\.nextlevdecisions\.com\/demo\?/;
  appContent = appContent.replace(demoLinkRegex, `const demoLink = \`${config.mainAppUrl}/demo?`);

  // Update the API endpoint
  const apiRegex = /await fetch\('\/api\/leads'/;
  appContent = appContent.replace(apiRegex, `await fetch('${config.apiUrl}/api/leads'`);

  fs.writeFileSync(appPath, appContent);
  console.log('âœ… App.tsx updated with your URLs');

  // Create deployment checklist
  const checklist = `# ðŸ“‹ Deployment Checklist for ${config.domain}

## Pre-deployment Setup
- [x] Configuration completed
- [ ] Environment variables set
- [ ] API endpoints configured
- [ ] Email service configured
- [ ] CRM integration tested

## Deployment Steps
- [ ] Build the application: \`npm run build\`
- [ ] Deploy to hosting platform (Vercel/Netlify)
- [ ] Configure domain DNS
- [ ] Set up SSL certificate
- [ ] Test contact form submissions

## Post-deployment Testing
- [ ] Landing page loads correctly
- [ ] All forms submit successfully  
- [ ] Demo links generate properly
- [ ] Email notifications work
- [ ] Analytics tracking active
- [ ] Mobile responsiveness verified

## Domain: ${config.domain}
## Main App: ${config.mainAppUrl}
## API: ${config.apiUrl}

## Next Steps:
1. Run \`npm run build\` to build for production
2. Deploy using \`npm run deploy:vercel\` or \`npm run deploy:netlify\`
3. Configure your domain DNS settings
4. Test all functionality

## Support:
- Email: ${config.contactEmail}
- Phone: ${config.supportPhone}
`;

  const checklistPath = path.join(__dirname, '..', 'deployment-checklist.md');
  fs.writeFileSync(checklistPath, checklist);
  console.log('âœ… Deployment checklist created');

  console.log('\nðŸŽ‰ Setup complete! Next steps:');
  console.log('1. Review your configuration in .env.local');
  console.log('2. Follow the deployment-checklist.md');
  console.log('3. Run `npm run build` to build for production');
  console.log('4. Deploy using your preferred method');

  rl.close();
}

// Run setup
setupDeployment().catch(console.error);
